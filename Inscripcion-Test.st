TestCase subclass: #TestMateria	instanceVariableNames: ''	classVariableNames: ''	package: 'Inscripcion-Test'!!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 21:12'!testMateriaConCupo3AceptaUn_H_Un_M_yUn_ONumero2	|materia|	materia := Materia cupo: 3.		materia inscribir: (Alumno padron: 5000 genero: #O).	materia inscribir: (Alumno padron: 5001 genero: #H).	materia inscribir: (Alumno padron: 5002 genero: #M).			self should: [		materia inscribir: (Alumno padron: 5003 genero: #O)	] raise: CupoGeneroExcedido.! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 19:31'!testUnAlumnoSeInscribeEnUnaMateriaDeCupo1Satisfactoriamente	|materia|		materia := Materia cupo: 1.		"tema 1 - Este método tiene a quedar desactualizado"	"materia inscribir: '70000' x: 'Juan'."		materia inscribir: Alumno new.		self should: [ materia inscribir: Alumno new ] raise: CupoSobrepasado.		"tema 2 - Codigo especifico de prueba"	"self assert: (materia inscriptos) equals: 1."	"self assert: (materia cupo) equals: 1."			! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 19:51'!testUnAlumnoSeInscribeEnUnaMateriaSatisfactoriamenteElSegundoNoPuedeInscribirsePorqueLaMateriaTieneCupo1SatisfactoriamenteCasoOk	|materia|		materia := Materia cupo: 1.		"tema 1 - Este método tiene a quedar desactualizado"	"materia inscribir: '70000' x: 'Juan'."		"tema 2 - Codigo especifico de prueba"	"self assert: (materia inscriptos) equals: 1."	"self assert: (materia cupo) equals: 1."		materia inscribir: Alumno new.		self should: [ 		materia inscribir: Alumno new. 	] raise: CupoSobrepasado.			! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 20:21'!testBuscoUnalumnoNoInscriptoYNoLoEncuentro	|materia|	materia := Materia cupo: 3.	materia inscribir: (Alumno padron: 5000).			"self assert: (materia alumnoPorPadron: 7000) equals: nil.	"	self should: [materia alumnoPorPadron: 7000] raise: NoExisteAlumno.! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 19:53'!testUnAlumnoSeInscribeEnUnaMateriaDeCupo1SatisfactoriamenteMetodoViolaTellDontAsk	|materia|		materia := Materia cupo: 1.		"tema 1 - Este método tiene a quedar desactualizado"	"materia inscribir: '70000' x: 'Juan'."		"tema 2 - Codigo especifico de prueba"	"self assert: (materia inscriptos) equals: 1."	"self assert: (materia cupo) equals: 1."		materia inscribir: Alumno new.		self deny: materia hayCupo.	! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 21:18'!testUnAlumnoDeIntercambioSeInscribeEnUnaMateriaLuegoPuedoEncontrarloPorPadron	|materia alumnoInscripto|	alumnoInscripto := Alumno padron: 'b7000'.		materia := Materia cupo: 10.	materia inscribir: (Alumno padron: 5000).	materia inscribir: alumnoInscripto.			self assert: (materia alumnoPorPadron: 'B7000') equals: alumnoInscripto.		! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 19:37'!testUnAlumnoSeInscribeEnUnaMateriaDeCupo1SatisfactoriamenteMetodoInecesario	|materia|		materia := Materia cupo: 1.		"tema 1 - Este método tiene a quedar desactualizado"	"materia inscribir: '70000' x: 'Juan'."		"tema 2 - Codigo especifico de prueba"	"self assert: (materia inscriptos) equals: 1."	"self assert: (materia cupo) equals: 1."		materia inscribir: Alumno new.		self assert: (materia inscriptos ) equals: 1.		! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 21:21'!testUnAlumnoSeInscribeEnUnaMateriaLuegoPuedoEncontrarloPorPadron	|materia alumnoInscripto|	alumnoInscripto := Alumno padron: 7000.		materia := Materia cupo: 10.	materia inscribir: (Alumno padron: 5000).	materia inscribir: alumnoInscripto.			self assert: (materia alumnoPorPadron: 7000) equals: alumnoInscripto.		! !!TestMateria methodsFor: 'tests' stamp: 'DS 10/7/2021 20:55'!testMateriaConCupo3AceptaUn_H_Un_M_yUn_O	|materia|	materia := Materia cupo: 3.		materia inscribir: (Alumno padron: 5000 genero: #O).			self should: [		materia inscribir: (Alumno padron: 5001 genero: #O)	] raise: CupoGeneroExcedido.! !